#cloud-config
write-files:
  - path: /root/c2f.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      FILE="$1"
      CURL_ARGS="-X GET"
      BASE_URL="http://useless.mass.goathorde.org:8500/v1/kv"
      URL_PREFIX=""
      OUT_DIR=$(dirname $FILE)
      echo "out dir: $OUT_DIR"
      [[ ! -d $OUT_DIR ]] && mkdir -p $OUT_DIR
      echo "url: $BASE_URL$URL_PREFIX$FILE?raw"
      curl $CURL_ARGS $BASE_URL$URL_PREFIX$FILE?raw -o $FILE
      [[ $? -eq 0 ]] && echo -e "\nsuccess" || echo -e "\nerror"
hostname: ${node_name}
coreos:
  etcd2:
    name: ${node_name}
    initial-cluster-token: abcdefg
    listen-client-urls: http://0.0.0.0:2379
    advertise-client-urls: http://${node_ip}:2379
    listen-peer-urls: http://${node_ip}:2380
    initial-advertise-peer-urls: http://${node_ip}:2380
    initial-cluster: ${cluster_list}
    initial-cluster-state: new
  flannel:
    public_ip: ${node_ip}
    etcd_endpoints: ${etcd_endpoints}
  fleet:
    metadata: "role=master"
  units:
    - name: systemd-timesyncd.service
      command: start
    - name: populate.service
      command: start
      content: |
        [Unit]
        Description=distribute config files

        [Service]
        ExecStartPre=/root/c2f.sh /etc/cloud.cfg
        ExecStartPre=/root/c2f.sh /etc/kubernetes/manifests/kube-apiserver.yaml
        ExecStartPre=/root/c2f.sh /etc/kubernetes/manifests/kube-controller-manager.yaml
        ExecStartPre=/root/c2f.sh /etc/kubernetes/manifests/kube-proxy.yaml
        ExecStartPre=/root/c2f.sh /etc/kubernetes/manifests/kube-scheduler.yaml
        ExecStartPre=/root/c2f.sh /etc/kubernetes/ssl/apiserver.pem
        ExecStartPre=/root/c2f.sh /etc/kubernetes/ssl/apiserver-key.pem
        ExecStartPre=/root/c2f.sh /etc/kubernetes/ssl/auth.txt
        ExecStartPre=/root/c2f.sh /etc/kubernetes/ssl/ca.pem
        ExecStartPre=/root/c2f.sh /etc/systemd/system/kubelet.service
        ExecStart=/usr/bin/touch /root/.done
        RemainAfterExit=yes
        Type=oneshot
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service

            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"${pod_network}", "Backend": {"Type": "vxlan"}}'
    - name: docker.service
      command: start
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
    - name: kubelet.service
      command: start
  update:
    group: beta
    reboot-strategy: off
